/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Logger {
  export type SnapshotStruct = {
    hashValue: string;
    recordsCount: BigNumberish;
    timestamp: BigNumberish;
  };

  export type SnapshotStructOutput = [string, number, number] & {
    hashValue: string;
    recordsCount: number;
    timestamp: number;
  };
}

export interface LoggerInterface extends utils.Interface {
  functions: {
    "addLog(string,string)": FunctionFragment;
    "addSnapshot(string,(string,uint32,uint32))": FunctionFragment;
    "addUser(address)": FunctionFragment;
    "getLogs(string)": FunctionFragment;
    "getSnapshots(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "whitelist(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLog"
      | "addSnapshot"
      | "addUser"
      | "getLogs"
      | "getSnapshots"
      | "owner"
      | "whitelist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLog",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSnapshot",
    values: [string, Logger.SnapshotStruct]
  ): string;
  encodeFunctionData(functionFragment: "addUser", values: [string]): string;
  encodeFunctionData(functionFragment: "getLogs", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getSnapshots",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;

  decodeFunctionResult(functionFragment: "addLog", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLogs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {};
}

export interface Logger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LoggerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLog(
      organizationId: string,
      logId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSnapshot(
      logId: string,
      snapshot: Logger.SnapshotStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addUser(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLogs(
      organizationId: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getSnapshots(
      logId: string,
      overrides?: CallOverrides
    ): Promise<[Logger.SnapshotStructOutput[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  addLog(
    organizationId: string,
    logId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSnapshot(
    logId: string,
    snapshot: Logger.SnapshotStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addUser(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLogs(organizationId: string, overrides?: CallOverrides): Promise<string[]>;

  getSnapshots(
    logId: string,
    overrides?: CallOverrides
  ): Promise<Logger.SnapshotStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addLog(
      organizationId: string,
      logId: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addSnapshot(
      logId: string,
      snapshot: Logger.SnapshotStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addUser(user: string, overrides?: CallOverrides): Promise<boolean>;

    getLogs(
      organizationId: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getSnapshots(
      logId: string,
      overrides?: CallOverrides
    ): Promise<Logger.SnapshotStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addLog(
      organizationId: string,
      logId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSnapshot(
      logId: string,
      snapshot: Logger.SnapshotStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addUser(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLogs(
      organizationId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSnapshots(logId: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addLog(
      organizationId: string,
      logId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSnapshot(
      logId: string,
      snapshot: Logger.SnapshotStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addUser(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLogs(
      organizationId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSnapshots(
      logId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
