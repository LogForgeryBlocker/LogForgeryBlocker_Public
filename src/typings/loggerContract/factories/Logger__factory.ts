/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Logger, LoggerInterface } from "../Logger";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "organizationId",
        type: "string",
      },
      {
        internalType: "string",
        name: "logId",
        type: "string",
      },
    ],
    name: "addLog",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "logId",
        type: "string",
      },
      {
        components: [
          {
            internalType: "string",
            name: "hashValue",
            type: "string",
          },
          {
            internalType: "uint32",
            name: "recordsCount",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "timestamp",
            type: "uint32",
          },
        ],
        internalType: "struct Logger.Snapshot",
        name: "snapshot",
        type: "tuple",
      },
    ],
    name: "addSnapshot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "addUser",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "organizationId",
        type: "string",
      },
    ],
    name: "getLogs",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "logId",
        type: "string",
      },
    ],
    name: "getSnapshots",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "hashValue",
            type: "string",
          },
          {
            internalType: "uint32",
            name: "recordsCount",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "timestamp",
            type: "uint32",
          },
        ],
        internalType: "struct Logger.Snapshot[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "whitelist",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160026000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611432806100db6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146101125780639b19251a14610130578063a273079a14610160578063d823f171146101905761007d565b80631c0b75e814610082578063421b2d8b146100b25780636e500e50146100e2575b600080fd5b61009c60048036038101906100979190610b73565b6101c0565b6040516100a99190610d1b565b60405180910390f35b6100cc60048036038101906100c79190610d9b565b6102ba565b6040516100d99190610de3565b60405180910390f35b6100fc60048036038101906100f79190610ff4565b610377565b6040516101099190610de3565b60405180910390f35b61011a61060f565b604051610127919061107f565b60405180910390f35b61014a60048036038101906101459190610d9b565b610635565b6040516101579190610de3565b60405180910390f35b61017a6004803603810190610175919061109a565b610655565b6040516101879190610de3565b60405180910390f35b6101aa60048036038101906101a59190610b73565b61082c565b6040516101b79190611237565b60405180910390f35b6060600183836040516101d4929190611289565b9081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b828210156102ae578382906000526020600020018054610221906112d1565b80601f016020809104026020016040519081016040528092919081815260200182805461024d906112d1565b801561029a5780601f1061026f5761010080835404028352916020019161029a565b820191906000526020600020905b81548152906001019060200180831161027d57829003601f168201915b505050505081526020019060010190610202565b50505050905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461031657600080fd5b6001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060019050919050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166103cf57600080fd5b60005b600085856040516103e4929190611289565b90815260200160405180910390208054905081101561054c5761052f60008686604051610412929190611289565b9081526020016040518091039020828154811061043257610431611303565b5b906000526020600020906002020160405180606001604052908160008201805461045b906112d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610487906112d1565b80156104d45780601f106104a9576101008083540402835291602001916104d4565b820191906000526020600020905b8154815290600101906020018083116104b757829003601f168201915b505050505081526020016001820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160049054906101000a900463ffffffff1663ffffffff1663ffffffff16815250508461098a565b1561053957600080fd5b80806105449061136b565b9150506103d2565b506000848460405161055f929190611289565b908152602001604051809103902082908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190805190602001906105b3929190610a57565b5060208201518160010160006101000a81548163ffffffff021916908363ffffffff16021790555060408201518160010160046101000a81548163ffffffff021916908363ffffffff1602179055505050600190509392505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900460ff1681565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166106ad57600080fd5b60005b600185856040516106c2929190611289565b9081526020016040518091039020805490508110156107c6576107a9600186866040516106f0929190611289565b908152602001604051809103902082815481106107105761070f611303565b5b906000526020600020018054610725906112d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610751906112d1565b801561079e5780601f106107735761010080835404028352916020019161079e565b820191906000526020600020905b81548152906001019060200180831161078157829003601f168201915b5050505050846109fe565b156107b357600080fd5b80806107be9061136b565b9150506106b0565b50600184846040516107d9929190611289565b908152602001604051809103902082908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610820929190610a57565b50600190509392505050565b606060008383604051610840929190611289565b9081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b8282101561097e57838290600052602060002090600202016040518060600160405290816000820180546108a1906112d1565b80601f01602080910402602001604051908101604052809291908181526020018280546108cd906112d1565b801561091a5780601f106108ef5761010080835404028352916020019161091a565b820191906000526020600020905b8154815290600101906020018083116108fd57829003601f168201915b505050505081526020016001820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160049054906101000a900463ffffffff1663ffffffff1663ffffffff16815250508152602001906001019061086e565b50505050905092915050565b600061099e836000015183600001516109fe565b6109ab57600090506109f8565b816020015163ffffffff16836020015163ffffffff16146109cf57600090506109f8565b816040015163ffffffff16836040015163ffffffff16146109f357600090506109f8565b600190505b92915050565b600081604051602001610a1191906113e5565b6040516020818303038152906040528051906020012083604051602001610a3891906113e5565b6040516020818303038152906040528051906020012014905092915050565b828054610a63906112d1565b90600052602060002090601f016020900481019282610a855760008555610acc565b82601f10610a9e57805160ff1916838001178555610acc565b82800160010185558215610acc579182015b82811115610acb578251825591602001919060010190610ab0565b5b509050610ad99190610add565b5090565b5b80821115610af6576000816000905550600101610ade565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610b3357610b32610b0e565b5b8235905067ffffffffffffffff811115610b5057610b4f610b13565b5b602083019150836001820283011115610b6c57610b6b610b18565b5b9250929050565b60008060208385031215610b8a57610b89610b04565b5b600083013567ffffffffffffffff811115610ba857610ba7610b09565b5b610bb485828601610b1d565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c26578082015181840152602081019050610c0b565b83811115610c35576000848401525b50505050565b6000601f19601f8301169050919050565b6000610c5782610bec565b610c618185610bf7565b9350610c71818560208601610c08565b610c7a81610c3b565b840191505092915050565b6000610c918383610c4c565b905092915050565b6000602082019050919050565b6000610cb182610bc0565b610cbb8185610bcb565b935083602082028501610ccd85610bdc565b8060005b85811015610d095784840389528151610cea8582610c85565b9450610cf583610c99565b925060208a01995050600181019050610cd1565b50829750879550505050505092915050565b60006020820190508181036000830152610d358184610ca6565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d6882610d3d565b9050919050565b610d7881610d5d565b8114610d8357600080fd5b50565b600081359050610d9581610d6f565b92915050565b600060208284031215610db157610db0610b04565b5b6000610dbf84828501610d86565b91505092915050565b60008115159050919050565b610ddd81610dc8565b82525050565b6000602082019050610df86000830184610dd4565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e3b82610c3b565b810181811067ffffffffffffffff82111715610e5a57610e59610e03565b5b80604052505050565b6000610e6d610afa565b9050610e798282610e32565b919050565b600080fd5b600080fd5b600067ffffffffffffffff821115610ea357610ea2610e03565b5b610eac82610c3b565b9050602081019050919050565b82818337600083830152505050565b6000610edb610ed684610e88565b610e63565b905082815260208101848484011115610ef757610ef6610e83565b5b610f02848285610eb9565b509392505050565b600082601f830112610f1f57610f1e610b0e565b5b8135610f2f848260208601610ec8565b91505092915050565b600063ffffffff82169050919050565b610f5181610f38565b8114610f5c57600080fd5b50565b600081359050610f6e81610f48565b92915050565b600060608284031215610f8a57610f89610dfe565b5b610f946060610e63565b9050600082013567ffffffffffffffff811115610fb457610fb3610e7e565b5b610fc084828501610f0a565b6000830152506020610fd484828501610f5f565b6020830152506040610fe884828501610f5f565b60408301525092915050565b60008060006040848603121561100d5761100c610b04565b5b600084013567ffffffffffffffff81111561102b5761102a610b09565b5b61103786828701610b1d565b9350935050602084013567ffffffffffffffff81111561105a57611059610b09565b5b61106686828701610f74565b9150509250925092565b61107981610d5d565b82525050565b60006020820190506110946000830184611070565b92915050565b6000806000604084860312156110b3576110b2610b04565b5b600084013567ffffffffffffffff8111156110d1576110d0610b09565b5b6110dd86828701610b1d565b9350935050602084013567ffffffffffffffff811115611100576110ff610b09565b5b61110c86828701610f0a565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61114b81610f38565b82525050565b6000606083016000830151848203600086015261116e8282610c4c565b91505060208301516111836020860182611142565b5060408301516111966040860182611142565b508091505092915050565b60006111ad8383611151565b905092915050565b6000602082019050919050565b60006111cd82611116565b6111d78185611121565b9350836020820285016111e985611132565b8060005b85811015611225578484038952815161120685826111a1565b9450611211836111b5565b925060208a019950506001810190506111ed565b50829750879550505050505092915050565b6000602082019050818103600083015261125181846111c2565b905092915050565b600081905092915050565b60006112708385611259565b935061127d838584610eb9565b82840190509392505050565b6000611296828486611264565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806112e957607f821691505b602082108114156112fd576112fc6112a2565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b600061137682611361565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156113a9576113a8611332565b5b600182019050919050565b60006113bf82610bec565b6113c98185611259565b93506113d9818560208601610c08565b80840191505092915050565b60006113f182846113b4565b91508190509291505056fea264697066735822122083d54f18030d2bc58ca6a16744f4a7af20bcc8196eb56e14fbd8498145b03e5364736f6c634300080b0033";

type LoggerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LoggerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Logger__factory extends ContractFactory {
  constructor(...args: LoggerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Logger> {
    return super.deploy(overrides || {}) as Promise<Logger>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Logger {
    return super.attach(address) as Logger;
  }
  override connect(signer: Signer): Logger__factory {
    return super.connect(signer) as Logger__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LoggerInterface {
    return new utils.Interface(_abi) as LoggerInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Logger {
    return new Contract(address, _abi, signerOrProvider) as Logger;
  }
}
